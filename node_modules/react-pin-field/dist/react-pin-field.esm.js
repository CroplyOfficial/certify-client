import { forwardRef, useRef, useImperativeHandle, useEffect, createElement } from 'react';
import { PinField } from '@soywod/pin-field';
export * from '@soywod/pin-field';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function noop() {//
}

var defaultProps = {
  ref: {
    current: /*#__PURE__*/new PinField()
  },
  length: 5,
  validate: /^[a-zA-Z0-9]$/,
  format: function format(key) {
    return key;
  },
  onResolveKey: noop,
  onRejectKey: noop,
  onChange: noop,
  onComplete: noop
};
var ReactPinField = /*#__PURE__*/forwardRef(function (customProps, fwdRef) {
  var ref = useRef(new PinField());

  var props = _extends({}, defaultProps, customProps);

  var className = props.className,
      length = props.length,
      validate = props.validate,
      format = props.format,
      onResolveKey = props.onResolveKey,
      onRejectKey = props.onRejectKey,
      onChange = props.onChange,
      onComplete = props.onComplete,
      inputProps = _objectWithoutPropertiesLoose(props, ["className", "ref", "length", "validate", "format", "onResolveKey", "onRejectKey", "onChange", "onComplete"]);

  function handleChange(evt) {
    if (evt instanceof CustomEvent) {
      onChange(evt.detail.value);
    }
  }

  function handleResolveKey(evt) {
    if (evt instanceof CustomEvent) {
      onResolveKey(evt.detail.key);
    }
  }

  function handleRejectKey(evt) {
    if (evt instanceof CustomEvent) {
      onRejectKey(evt.detail.key);
    }
  }

  function handleComplete(evt) {
    if (evt instanceof CustomEvent) {
      onComplete(evt.detail.value);
    }
  }

  useImperativeHandle(fwdRef, function () {
    return ref.current;
  }, [ref]);
  useEffect(function () {
    if (ref.current) {
      ref.current.validate = validate;
      ref.current.format = format;
      ref.current.addEventListener("change", handleChange);
      ref.current.addEventListener("resolve-key", handleResolveKey);
      ref.current.addEventListener("reject-key", handleRejectKey);
      ref.current.addEventListener("complete", handleComplete);
      return function () {
        ref.current.removeEventListener("change", handleChange);
        ref.current.removeEventListener("resolve-key", handleResolveKey);
        ref.current.removeEventListener("reject-key", handleRejectKey);
        ref.current.removeEventListener("complete", handleComplete);
      };
    }

    return;
  }, []);
  return createElement("swd-pin-field", _extends({
    ref: ref,
    "class": className,
    length: length
  }, inputProps));
});

export default ReactPinField;
export { ReactPinField };
//# sourceMappingURL=react-pin-field.esm.js.map
