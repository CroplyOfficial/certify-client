/// <reference types="react" />
import { PinField } from ".";
export declare type ReactPinFieldInputProps = Omit<React.InputHTMLAttributes<HTMLInputElement>, "onChange" | "value">;
export declare type ReactPinFieldDefaultProps = {
    ref: React.Ref<PinField>;
    length: number;
    validate: string | string[] | RegExp | ((key: string) => boolean);
    format: (char: string) => string;
    onResolveKey: (key: string, ref?: HTMLInputElement) => any;
    onRejectKey: (key: string, ref?: HTMLInputElement) => any;
    onChange: (code: string) => void;
    onComplete: (code: string) => void;
};
export declare type ReactPinFieldProps = Partial<ReactPinFieldDefaultProps> & ReactPinFieldInputProps;
export declare type ReactPinFieldNotifierProps = {
    refs: React.MutableRefObject<HTMLInputElement[]>;
} & ReactPinFieldDefaultProps;
export declare type ReactPinFieldState = {
    focusIdx: number;
    codeLength: ReactPinFieldDefaultProps["length"];
    isKeyAllowed: (key: string) => boolean;
    fallback: {
        idx: number;
        val: string;
    } | null;
};
export declare type ReactPinFieldAction = {
    type: "handle-key-down";
    key: string;
    idx: number;
    val: string;
} | {
    type: "handle-key-up";
    idx: number;
    val: string;
} | {
    type: "handle-paste";
    idx: number;
    val: string;
} | {
    type: "focus-input";
    idx: number;
};
export declare type ReactPinFieldEffect = {
    type: "focus-input";
    idx: number;
} | {
    type: "set-input-val";
    idx: number;
    val: string;
} | {
    type: "resolve-key";
    idx: number;
    key: string;
} | {
    type: "reject-key";
    idx: number;
    key: string;
} | {
    type: "handle-delete";
    idx: number;
} | {
    type: "handle-code-change";
};
