{"version":3,"file":"pin-field.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["const IGNORED_META_KEYS = [\"Alt\", \"Control\", \"Enter\", \"Meta\", \"Shift\", \"Tab\"];\n\nfunction range(start: number, length: number) {\n  return Array.from({length}, (_, i) => i + start);\n}\n\nfunction debug(scope: string, fn: string, msg?: string) {\n  console.debug(`[PIN Field] (${scope}) ${fn}${msg ? `: ${msg}` : \"\"}`);\n}\n\nfunction getPrevInputIdx(cursor: number) {\n  return Math.max(0, cursor - 1);\n}\n\nfunction getNextInputIdx(cursor: number, max: number) {\n  if (max === 0) return 0;\n  return Math.min(cursor + 1, max - 1);\n}\n\ntype Fallback = {\n  idx: number;\n  val: string;\n};\n\ntype Effect =\n  | {type: \"handle-code-change\"}\n  | {type: \"focus-input\"; idx: number}\n  | {type: \"set-input-val\"; idx: number; val: string}\n  | {type: \"resolve-key\"; idx: number; key: string}\n  | {type: \"reject-key\"; idx: number; key: string}\n  | {type: \"handle-delete\"; idx: number};\n\ntype Action =\n  | {type: \"handle-key-down\"; idx: number; key: string; val: string}\n  | {type: \"handle-key-up\"; idx: number; val: string}\n  | {type: \"handle-paste\"; idx: number; val: string};\n\nexport type PinFieldValidator = string | string[] | RegExp | ((key: string) => boolean);\nexport type PinFieldFormatter = (key: string) => string;\n\nexport class PinField extends HTMLElement {\n  /**\n   * Current input focus cursor.\n   */\n  private cursor: number = 0;\n\n  /**\n   * Actions stack.\n   */\n  private actions: Action[] = [];\n\n  /**\n   * Effects stack.\n   */\n  private effects: Effect[] = [];\n\n  /**\n   * State-holder fallback for old browsers and mobile support.\n   */\n  private fallback: Fallback | null = null;\n\n  /**\n   * Wrapper around the validator (for internal use).\n   */\n  private isKeyAllowed(key?: string) {\n    if (!key) return false;\n    if (key.length > 1) return false;\n    if (typeof this.validate === \"string\") return this.validate.split(\"\").includes(key);\n    if (this.validate instanceof Array) return this.validate.includes(key);\n    if (this.validate instanceof RegExp) return this.validate.test(key);\n    return this.validate(key);\n  }\n\n  /**\n   * List of HTMLInputElement the PIN Field is composed of.\n   */\n  inputs: HTMLInputElement[] = [];\n\n  /**\n   * Length of the field.\n   */\n  length: number = 5;\n\n  /**\n   * Validator.\n   */\n  validate: PinFieldValidator = /^[a-zA-Z0-9]$/;\n\n  /**\n   * Formatter.\n   */\n  format: PinFieldFormatter = (key: string) => {\n    return key;\n  };\n\n  /**\n   * Disabled getter.\n   */\n  get disabled() {\n    return this.hasAttribute(\"disabled\");\n  }\n\n  /**\n   * Disabled setter.\n   */\n  set disabled(val) {\n    if (val) {\n      this.setAttribute(\"disabled\", \"\");\n    } else {\n      this.removeAttribute(\"disabled\");\n    }\n  }\n\n  /**\n   * List of observed attributes.\n   */\n  static get observedAttributes() {\n    return [\"disabled\"];\n  }\n\n  /**\n   * Attribute changed callback.\n   */\n  protected attributeChangedCallback(name: string, prevVal: string, nextVal: string) {\n    if (prevVal !== nextVal) {\n      switch (name) {\n        case \"disabled\": {\n          this.inputs.forEach(i => (i.disabled = this.disabled));\n        }\n      }\n    }\n  }\n\n  /**\n   * Connected callback.\n   */\n  connectedCallback() {\n    if (this.hasAttribute(\"length\")) {\n      this.length = Number(this.getAttribute(\"length\")) || 5;\n      if (this.length < 1) {\n        throw new RangeError(`The PIN Field length should be greater than 0 (got ${this.length})`);\n      }\n    }\n\n    const validate = this.getAttribute(\"validate\");\n    if (typeof validate === \"string\") {\n      this.validate = validate;\n    }\n\n    const input = document.createElement(\"input\");\n    input.autocapitalize = \"off\";\n    input.autocomplete = \"off\";\n    input.inputMode = \"text\";\n\n    const clearAttrs = [];\n    for (let i = 0; i < this.attributes.length; i++) {\n      const attr = this.attributes[i];\n      if (![\"id\", \"autofocus\"].includes(attr.name)) {\n        input.setAttribute(attr.name, attr.value);\n        clearAttrs.push(() => attr && this.removeAttribute(attr.name));\n      }\n    }\n\n    this.append(\n      ...range(0, this.length).map(idx => {\n        const inputClone = input.cloneNode(true) as HTMLInputElement;\n\n        if (idx === 0 && this.hasAttribute(\"autofocus\")) {\n          inputClone.autofocus = true;\n          this.removeAttribute(\"autofocus\");\n        }\n\n        this.inputs.push(inputClone);\n        return inputClone;\n      }),\n    );\n\n    const tpl = document.createElement(\"slot\");\n    const css = document.createElement(\"style\");\n    css.innerText = \":host{display:flex;}\";\n    this.attachShadow({mode: \"open\"}).append(css, tpl);\n\n    clearAttrs.forEach(clear => clear());\n\n    this.inputs.forEach((input, idx) => {\n      input.addEventListener(\"keydown\", this.handleKeyDown(idx));\n      input.addEventListener(\"keyup\", this.handleKeyUp(idx));\n      input.addEventListener(\"paste\", this.handlePaste(idx));\n    });\n  }\n\n  /**\n   * Disconnected callback.\n   */\n  disconnectedCallback() {\n    this.inputs.forEach((input, idx) => {\n      input.removeEventListener(\"keydown\", this.handleKeyDown(idx));\n      input.removeEventListener(\"keyup\", this.handleKeyUp(idx));\n      input.removeEventListener(\"paste\", this.handlePaste(idx));\n    });\n  }\n\n  /**\n   * Set a value starting from a specific index using the effects stack.\n   */\n  private applySetValAt(idx: number, val: string) {\n    if (val.split(\"\").slice(0, this.length).every(this.isKeyAllowed.bind(this))) {\n      const pasteLen = Math.min(val.length, this.length - idx);\n      const nextCursor = getNextInputIdx(pasteLen + idx - 1, this.length);\n\n      this.effects.push(\n        {type: \"handle-code-change\"},\n        {type: \"focus-input\", idx: nextCursor},\n        ...range(0, pasteLen).flatMap<Effect>(i => [\n          {\n            type: \"set-input-val\",\n            idx: idx + i,\n            val: val[i],\n          },\n          {\n            type: \"resolve-key\",\n            idx: idx + i,\n            key: val[i],\n          },\n        ]),\n      );\n    } else {\n      this.effects.push(\n        {type: \"handle-code-change\"},\n        {type: \"reject-key\", idx, key: val},\n        {type: \"set-input-val\", idx, val: \"\"},\n      );\n    }\n  }\n\n  /**\n   * Execute all actions present in the stack.\n   * An action should mutate internal state and generate effects.\n   */\n  private executeAll() {\n    while (this.actions.length > 0) {\n      const action = this.actions.pop() as Action;\n\n      switch (action.type) {\n        case \"handle-key-down\": {\n          debug(\"action\", \"handle-key-down\", `key=${action.key}`);\n\n          switch (action.key) {\n            case \"Unidentified\": {\n              this.fallback = {idx: action.idx, val: action.val};\n              break;\n            }\n\n            case \"Dead\": {\n              this.effects = [\n                {type: \"handle-code-change\"},\n                {type: \"reject-key\", idx: action.idx, key: action.key},\n                {type: \"set-input-val\", idx: action.idx, val: \"\"},\n              ];\n              break;\n            }\n\n            case \"ArrowLeft\": {\n              this.cursor = getPrevInputIdx(action.idx);\n              this.effects = [{type: \"focus-input\", idx: this.cursor}];\n              break;\n            }\n\n            case \"ArrowRight\": {\n              this.cursor = getNextInputIdx(action.idx, this.length);\n              this.effects = [{type: \"focus-input\", idx: this.cursor}];\n              break;\n            }\n\n            case \"Delete\":\n            case \"Backspace\": {\n              this.effects = [{type: \"handle-code-change\"}, {type: \"handle-delete\", idx: action.idx}];\n              break;\n            }\n\n            default: {\n              if (this.isKeyAllowed(action.key)) {\n                this.cursor = getNextInputIdx(action.idx, this.length);\n                this.effects = [\n                  {type: \"handle-code-change\"},\n                  {type: \"focus-input\", idx: this.cursor},\n                  {type: \"resolve-key\", idx: action.idx, key: action.key},\n                  {type: \"set-input-val\", idx: action.idx, val: action.key},\n                ];\n              } else {\n                this.effects = [{type: \"reject-key\", idx: action.idx, key: action.key}];\n              }\n            }\n          }\n\n          break;\n        }\n\n        case \"handle-key-up\": {\n          if (!this.fallback) {\n            debug(\"action\", \"handle-key-up\", \"ignored\");\n            break;\n          }\n\n          debug(\"action\", \"handle-key-up\");\n          const {idx, val: prevVal} = this.fallback;\n          let val = action.val;\n\n          if (prevVal === \"\" && val === \"\") {\n            this.effects.push({type: \"handle-delete\", idx}, {type: \"handle-code-change\"});\n          } else if (prevVal !== \"\" && val !== \"\") {\n            val = prevVal === val[0] ? val.substring(1) : val.substring(0, val.length - 1);\n            this.applySetValAt(idx, val);\n          } else if (val !== \"\") {\n            this.applySetValAt(idx, val);\n          }\n\n          this.fallback = null;\n          break;\n        }\n\n        case \"handle-paste\": {\n          this.applySetValAt(action.idx, action.val);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Apply all effects present in the stack.\n   * An effect is an action with side-effects.\n   */\n  private applyAll() {\n    while (this.effects.length > 0) {\n      const eff = this.effects.pop() as Effect;\n\n      switch (eff.type) {\n        case \"focus-input\": {\n          debug(\"effect\", \"focus-input\", `idx=${eff.idx}`);\n          this.inputs[eff.idx].focus();\n          break;\n        }\n\n        case \"set-input-val\": {\n          debug(\"effect\", \"set-input-val\", `idx=${eff.idx},val=${eff.val}`);\n          const val = this.format(eff.val);\n          this.inputs[eff.idx].value = val;\n          break;\n        }\n\n        case \"resolve-key\": {\n          debug(\"effect\", \"resolve-key\", `idx=${eff.idx},key=${eff.key}`);\n          this.inputs[eff.idx].setCustomValidity(\"\");\n          this.dispatchEvent(new CustomEvent(\"resolve\", {detail: {key: eff.key}}));\n          break;\n        }\n\n        case \"reject-key\": {\n          debug(\"effect\", \"reject-key\", `idx=${eff.idx},key=${eff.key}`);\n          this.inputs[eff.idx].setCustomValidity(\"Invalid key\");\n          this.dispatchEvent(new CustomEvent(\"reject\", {detail: {key: eff.key}}));\n          break;\n        }\n\n        // TODO: split into existing effects\n        case \"handle-delete\": {\n          debug(\"effect\", \"handle-delete\", `idx=${eff.idx}`);\n          const prevVal = this.inputs[eff.idx].value;\n          this.inputs[eff.idx].setCustomValidity(\"\");\n          this.inputs[eff.idx].value = \"\";\n\n          if (!prevVal) {\n            const prevIdx = getPrevInputIdx(eff.idx);\n            this.inputs[prevIdx].focus();\n            this.inputs[prevIdx].setCustomValidity(\"\");\n            this.inputs[prevIdx].value = \"\";\n          }\n\n          break;\n        }\n\n        case \"handle-code-change\": {\n          const dir = (document.documentElement.getAttribute(\"dir\") || \"ltr\").toLowerCase();\n          const codeArr = this.inputs.map(r => r.value.trim());\n          const value = (dir === \"rtl\" ? codeArr.reverse() : codeArr).join(\"\");\n          debug(\"effect\", \"handle-code-change\", `val={${value}}`);\n          this.dispatchEvent(new CustomEvent(\"change\", {detail: {value}}));\n\n          if (value.length === this.length) {\n            this.setAttribute(\"completed\", \"\");\n            this.dispatchEvent(new CustomEvent(\"complete\", {detail: {value}}));\n          } else {\n            this.removeAttribute(\"completed\");\n          }\n\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Execute all actions, then apply all effects.\n   */\n  private render() {\n    this.executeAll();\n    this.applyAll();\n  }\n\n  /**\n   * Wrapper around key down event handler.\n   */\n  private handleKeyDown(idx: number) {\n    return (evt: KeyboardEvent) => {\n      if (IGNORED_META_KEYS.includes(evt.key) || evt.ctrlKey || evt.altKey || evt.metaKey) {\n        debug(\"handleKeyDown\", \"ignored\", `idx=${idx},key=${evt.key}`);\n        return;\n      }\n\n      if (evt.target instanceof HTMLInputElement) {\n        evt.preventDefault();\n        const val = evt.target.value;\n        debug(\"handleKeyDown\", \"triggered\", `idx=${idx},key=${evt.key},val=${val}`);\n        this.actions.push({type: \"handle-key-down\", idx, key: evt.key, val});\n        this.render();\n      }\n    };\n  }\n\n  /**\n   * Wrapper around key up event handler.\n   */\n  private handleKeyUp(idx: number) {\n    return (evt: KeyboardEvent) => {\n      if (evt.target instanceof HTMLInputElement) {\n        const val = evt.target.value;\n        debug(\"handleKeyUp\", \"triggered\", `idx=${idx},val=${val}`);\n        this.actions.push({type: \"handle-key-up\", idx, val});\n        this.render();\n      }\n    };\n  }\n\n  /**\n   * Wrapper around paste event handler.\n   */\n  private handlePaste(idx: number) {\n    return (evt: ClipboardEvent) => {\n      evt.preventDefault();\n      const val = evt.clipboardData ? evt.clipboardData.getData(\"Text\") : \"\";\n      debug(\"handlePaste\", \"triggered\", `idx=${idx},val=${val}`);\n      this.actions.push({type: \"handle-paste\", idx, val});\n      this.render();\n    };\n  }\n}\n\ncustomElements.define(\"swd-pin-field\", PinField);\n\nexport default PinField;\n"],"names":["IGNORED_META_KEYS","range","start","length","Array","from","_","i","debug","scope","fn","msg","console","getPrevInputIdx","cursor","Math","max","getNextInputIdx","min","PinField","key","isKeyAllowed","this","validate","split","includes","RegExp","test","attributeChangedCallback","name","prevVal","nextVal","inputs","forEach","disabled","_this2","connectedCallback","hasAttribute","Number","getAttribute","RangeError","input","document","createElement","autocapitalize","autocomplete","inputMode","clearAttrs","attr","_this3","attributes","setAttribute","value","push","removeAttribute","append","map","idx","inputClone","cloneNode","autofocus","tpl","css","innerText","attachShadow","mode","clear","addEventListener","handleKeyDown","handleKeyUp","handlePaste","disconnectedCallback","removeEventListener","_this4","applySetValAt","val","slice","every","bind","pasteLen","nextCursor","effects","type","flatMap","executeAll","actions","action","pop","fallback","substring","applyAll","eff","focus","format","setCustomValidity","dispatchEvent","CustomEvent","detail","prevIdx","dir","documentElement","toLowerCase","codeArr","r","trim","reverse","join","render","evt","ctrlKey","altKey","metaKey","target","HTMLInputElement","preventDefault","_this5","_this6","clipboardData","getData","_this7","HTMLElement","customElements","define"],"mappings":"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"}